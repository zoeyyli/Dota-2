[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dota 2",
    "section": "",
    "text": "1 Introduction\nFor the final project, We chose to analyze the value of abilities in Dota 2’s “Ability Draft” (AD) game mode in order to provide a thoughtful recommendation for ability selections. So what is Dota 2? Dota 2, short for Defense of the Ancients 2, is one of the most popular multiplayer online battle arena (MOBA) video game developed and published by Valve Corporation.\nNow we are going to discuss the detailed context of Dota 2. There are two teams of five players for this game, with each team occupying and defending their territories on a map. Every drafting phase begins by randomly selecting 12 out of the 124 characters or “heroes” in Dota 2. Each hero has four unique abilities associated with them, [QA, WA, EA, RA] for a generic hero A. Of the 12 selected heroes, one is assigned to each of the 10 players (assignment is unique), although the abilities of the unused heroes remain in the drafting pool. Then, in drafting order, each player selects one of the abilities in the pool to assign to their hero. Once all players have four abilities, the drafting phase ends and the players face-off in a five versus five Dota 2 match.\nGold and experience are finite resources in Dota 2 that must be divided amongst teammates. In practice, it is better for some players to receive the majority of the resources because different abilities/heroes require various resources to be maximally effective. In AD, these resources must be intuitively divided by the players on the same team to reach maximum effectiveness.\nConsidering this, we formulate ten research questions to begin our data exploration:\n- Which abilities have the highest average win rate, damage, kills, gold, experiences, etc., and are therefore the most valuable?\n- What is the relationship between heroes and the abilities selected for them?\n- What abilities are successful on the player with the most/fewest resources on a team?\n- How are abilities distributed between teams in one-sided/even matches?\n- Given a drafting pool and a hero, what ability should a player pick?\n- What is the relationship between abilities and items?\n- How do the in-game properties of heroes relate to abilities?\n- What abilities soak large amounts of resources but fail to win the game?\n- Do abilities or heroes function better on radiant or dire?\n- What abilities, heroes, and items are responsible for dealing significant building damage?"
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical Description",
    "text": "2.1 Technical Description\nThe data source we chose is OPENDOTA, a third-party, open-source data platform that collects data from Dota 2 games. It includes information concerning player and match statistics by leveraging the Dota 2 API provided by Valve, the parent company of Dota 2. Over five billion matches are stored, and matches can be accessed through the API within hours of their completion.\nThere are approximately 16 quadrillion possible drafts, and 500 million ways to order the heroes in any given AD game of Dota 2. This ensures that no AD match is exactly like another. In our analysis, we will evaluate the effectiveness of each ability across a small subset of these matches.\nWe compiled our dataset by we querying the OPENDOTA API to obtain AD matches. Matches are accessed using a “match_id” parameter. The easiest way to obtain a match_id is to query the API with a ‘player_id’, which fetches the matches that player has played. We used a few additional parameters to ensure that the match was the AD game mode. Unfortunately, there was no way to query the API to receive a match_id independently of a player, so the matches in our dataset were accessed with a player_id 74152970.\nThe response from the API upon requesting a particular match_id is a JSON object containing information pertaining to the match. For example, keys in the response indicate which team won, how long the game was, the total scores of both teams, the chat-log of the game, and the players present in the game. Each of the ten players are nested within the player data, and have their own keys such as their abilities, their number of kills, their total gold earned, and what items they owned.\nWe chose to format our data so that each row represents one player in one match. The columns include the general data from the match as well as the individual player data. In the raw responses, we noticed dozens of fields consistently being left blank. However, most of the information we aimed to collect was preserved and we selected a total of 41 fields to preserve for each data entry, giving us plenty to work with.\nSome data, like the abilities and heroes, are stored as integers rather than names. As a result, we will have to transform these values according to a key that we have obtained from the API. Additionally, a player’s abilities are actually stored in the order in which the player leveled the abilities up. We will need to parse which abilities a player actually has from this list, and decide whether or not to preserve the leveling order. This also raises the edge case of a player having an ability but never leveling it, which—although possible—is incredibly rare.\nWe performed our data compilation in Python and wrote the modified responses into an external CSV file, which we can import into R. Below is the breakdown of columns within the data:\nbarracks_status_dire — integer: dire barracks wellbeing\nbarracks_status_radiant — integer: radiant barracks wellbeing\ndire_score — integer: dire kill score\nduration — integer in seconds: length of the game\nfirst_blood_time — integer in seconds: time of the first kill\nradiant_score — integer: radiant kill score\nradiant_win — boolean: radiant victory\nstart_time — integer: absolute time the game started\ntower_status_radiant — integer: radiant tower wellbeing\nmatch_id — integer: the id of the match\nplayer_slot — integer: 0-4: radiant player order, 128-132: dire player order\nability_upgrades_arr — array (integers): order in which player leveled abilities\naccount_id — integer: player id\nassists — integer: number of kills aided in\ndeaths — integer: number of deaths\ndenies — integer: number of units denied\ngold_per_min — integer: gold accumulated per minute\ngold_spent — integer: gold spent\nhero_damage — integer: damage dealt\nhero_healing — integer: healing provided to teammates\nhero_id — integer: id of the player’s hero\nitem_0 — integer: id of item 0\nitem_1 — integer: id of item 1\nitem_2 — integer: id of item 2\nitem_3 — integer: id of item 3\nitem_4 — integer: id of item 4\nitem_ — integer: id of item 5\nitem_neutral — integer: id of item neutral\nkills — integer: number of kills\nlast_hits — integer: number of last hits  level — integer: hero level at the end of the match\nnet_worth — integer: value of the hero at the end of the match\ntower_damage — integer: damage dealt to enemy buildings\nxp_per_min — integer: experience accumulated per minute\npersonaname — string, None: if available, the username of the player\nisRadiant — boolean: indicates if the player is on radiant\nwin — boolean: indicates if the player won\nkills_per_min — integer: kills acquired per minute\nkda — float: kills / deaths\ntotal_gold — integer: total gold accumulated\ntotal_xp — integer: total experience accumulated\n\nAfter processing responses for over 8 hours, we collected data from a total of 668 matches. The API was very responsive when it came to fetching recent matches, taking only a few seconds, so it is possible that older matches are responsible for slowing down the process."
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.2 Research Plan",
    "text": "2.2 Research Plan\nTo begin our research, we will need to do some final formatting of the data. This includes the formatting of the integer ids for several columns and the parsing of the ability_upgrades_arr column. Additionally, since most of our questions are directed at individual abilities, we will likely split each row into four separate entries, one for each of the abilities possessed by the player.\nAdditionally, considering the differences in what abilities are present from one game to another, it may be helpful to add a column that includes the other abilities that were available in the pool, whether that ability was picked in the draft, and whether it was against or with the ability in the entry.\nOnce the data is processed and cleaned, we can proceed to answering our research questions, as is outlined below:\n\nWhich abilities have the highest average win rate, damage, kills, gold, experiences, etc., and are therefore the most valuable?\nWe could make several bar charts plotting the average of the desired metric for an ability across the dataset. We could also create a scatterplot comparing the relationship between the two metrics and the ability.\nWhat is the relationship between heroes and the abilities selected for them?\nWe could look at individual hero-ability pairings while fixing the ability or the hero and display it in a bar chart. We could also calculate averages for all hero-ability pairings and search for the most and least successful, and plot those pairings. Since there are multiple ‘success’ metrics, we could also create scatterplots to plot hero-ability pairs across two metrics at a time, like gold and experience or kills and deaths.\nAdditionally, it may be interesting to see how common it is for particular heroes to pick an ability. We could plot a bar chart with the total number of times each hero picked an ability.\nWhat abilities are successful on the player with the most/fewest resources on a team?\nWe would need to filter the data to ascertain which heroes on a team were delegated large or small portions of the resources available to the team. Then, we could plot bar charts or scatter plots depicting the effectiveness or ineffectiveness of abilities based on allocated resources.\nHow are abilities distributed between teams in one-sided/even matches?\nWe could filter our data for matches in which the duration was short, the kill-score was one-sided, or the difference in resources between teams was great. Then, we could track the prevalence of abilities on the winning or losing teams.\nGiven a drafting pool and a hero, what ability should a player pick?\nThis is likely the most complicated of our research questions. First, we consider that that value of an ability is the sum of how much value it provides, and how much value it would provide to the enemy. To figure out which ability a player should pick in the draft, we could create facetted, two-by-five heat maps representing the players in the draft.\nIf a player won with the ability, we could add 1 to their tile, and subtract 1 if they lost, and facet for each ability in the drafting pool. Additionally, drafting pools that are more similar hold more predictive weight, but because there are fewer samples the more common draft pools become, the data becomes less reliable. To account for this, we could assign higher weights to more similar pools, or we could further facet the heat maps by the number of abilities held in common between the drafting pools.\n\nIf we have time and would like to do additional data exploration, we could also answer the following questions:\n\nWhat is the relationship between abilities and items?\nWe could perform some exploratory analysis on the ability-item pairings, similar to hero-ability pairings.\nHow do the in-game properties of heroes relate to abilities?\nIn Dota 2, the heroes themselves have properties associated with them, like health, armor, and mana. The OPENDOTA API also includes this information, and we could augment our data with the base values of each hero to perform additional analysis and look for trends.\nWhat abilities soak large amounts of resources but fail to win the game?\nWe could filter for lost games and tally the abilities present on the rich members of the losing team.\nDo abilities or heroes function better on radiant or dire?\nWe could filter the data by which team the ability was present on and see if there are any trends. There are three abilities that have different functions depending on what team they are on, and we may see some difference in effectiveness for these abilities.\nWhat abilities, heroes, and items are responsible for dealing significant building damage?\nWe could take the building damage dealt by a player with an ability, and tally the total building damage of all of the abilities.  Depending on the results of our exploration and analysis, we may choose to pursue these questions or others. But these ideas give us a place to start when exploring the data. We hope we will come across patterns that lead to further questions that we can’t anticipate!"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nRows: 12911 Columns: 41\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): ability, hero, personaname\ndbl (36): barracks_status_dire, barracks_status_radiant, dire_score, duratio...\nlgl  (2): radiant_win, isRadiant\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nIn the figure above, we can see the number of missing values in each column. Immediately, we notice massive values in the tower_damage, hero_healing, hero_damage, gold_spent, ability_upgrades_arr, personaname, account_id, and kills_per_min columns.\nSome accounts are private and are therefore not stored in the system, which explains the missing data in the account_id and personaname columns.\nThe kills_per_min column has a missing value if the player achieved no kills during the course of the match, so these values are actually 0.\nWe are not sure what is responsible for the gaps in tower_damage, hero_healing, hero_damage, gold_spent, ability_upgrades_arr. It is particularly troublesome considering that the ability_upgrades_arr column is crucial for analysis. After querying the API for over 8 hours, we halted the process early, but it seems unlikely that that would have been responsible for the gaps. More likely, there are just gaps or errors in OPENDOTA’s data collection. Luckily, the same rows are missing multiple columns, leaving us with well over 3000 samples to begin analysis with."
  },
  {
    "objectID": "results.html#select-ability-phase",
    "href": "results.html#select-ability-phase",
    "title": "3  Results",
    "section": "3.1 Select Ability Phase",
    "text": "3.1 Select Ability Phase\nBefore answering the research questions, we need to select the abilities we would like to analyze. There are over 500 abilities in total, which is an extremely large pool, so we decide to choose 30 of them with the most sufficient data given. Thus, firstly, we will draw the barplot showing the frequencies of all abilities, and our goal is to select the top 30 to do the future analysis.\n\n\nCode\ndf = as.data.frame(table(dota2$ability))\nnames(df)[1] = 'ability'\ndf$rank = rank(df$Freq)\ndf &lt;- df[order(df$rank,decreasing=TRUE),]\ndf &lt;- head(df,30)\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(forcats)\nggplot(df, aes(x=reorder(ability,-Freq),y=Freq))+\n  geom_col(color='blue', fill ='cornflowerblue', width=0.8)+\n  labs(title=\"Frequency Count of Top 30 Abilities\",x=\"Ability\", y = \"Count\")+\n  theme(axis.text.x = element_text(angle = 90, size = 8)) \n\n\n\n\n\nCode\ndota2 &lt;- dota2[dota2$ability %in% df$ability,]\n\n\nThe abilities are ordered based on their frequencies in the dataset, and the above graph only shows the abilities with top 30 frequencies. We can see for these top abilities, there are not much variation in their frequencies, all around 30 counts. Thus, we can ensure that there’s sufficient data to analyze these abilities."
  },
  {
    "objectID": "results.html#which-abilities-have-the-highest-damage-kills-gold-experiences-points-and-kda-and-are-therefore-the-most-valuable",
    "href": "results.html#which-abilities-have-the-highest-damage-kills-gold-experiences-points-and-kda-and-are-therefore-the-most-valuable",
    "title": "3  Results",
    "section": "3.2 Which abilities have the highest damage, kills, gold, experiences points, and kda, and are therefore the most valuable?",
    "text": "3.2 Which abilities have the highest damage, kills, gold, experiences points, and kda, and are therefore the most valuable?\nTo answer the question, we decide to draw parallel coordinate plots which is useful when we want to get the abilities that top the charts in all five indicators. It’s important to note that kda is a statistic that is used to measure a player’s performance.\n\n\nCode\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\nlibrary(dplyr)\ncolnames(dota2)[35] &lt;- \"damage\"\ndf_ability &lt;- dota2[,c(\"total_gold\",\"kills\",\"kda\",\"damage\", \"total_xp\", \"ability\")]\nGGally::ggparcoord(data = df_ability, columns = 1:5, alphaLines = .4, splineFactor = TRUE, title = \"Parallel Coordinates Plot\")\n\n\n\n\n\nThis is the parallel coordinate plot colored by abilities so that we can see the trend of lines of different colors. In general, the lines are compact at the start and at the end, while it’s relatively widespread in the middle, with several lines having extremely large value of kda (potential outliers).\n\n\nCode\nlibrary(parcoords)\ndf &lt;- dota2[,c(\"total_gold\",\"kills\",\"kda\",\"damage\", \"total_xp\")]\nparcoords::parcoords(data = df, rownames = FALSE, brushMode = \"1d-axes\")\n\n\n\n\n\n\nThis is the interactive parallel coordinate plot for all 30 abilities. We make it interactive such that we can move axis around and we can filter for particular section which easier to see the top abilities. However, since the dataset is too large, the lines overlap, so we need to select specific region to interpret the plot.\n\n\nCode\ndf &lt;- df[df$kills &gt; 16 & df$total_xp &gt; 36000  & df$total_gold &gt; 32000 & df$kda &gt; 10,]\nparcoords::parcoords(data = df, rownames = FALSE, brushMode = \"1d-axes\")\n\n\n\n\n\n\nFrom the interactive parallel coordinate plot, I select a specific region where these abilities have relatively high values across all five variables, damage, kills, gold, experiences points earned, and kda, and I filter the dataset based on that. However, it’s important to notice that in the above plot there are only three lines because two abilities have exactly same all five attributes so the two lines overlap.\n\n\nCode\ndf_ability &lt;- df_ability[df_ability$kills &gt; 16 & df_ability$total_xp &gt; 36000  & df_ability$total_gold &gt; 32000 & df_ability$kda &gt; 10 ,]\ndf_ability\n\n\n      total_gold kills   kda damage total_xp                     ability\n1008       40849    17 19.00   1082    45425 omniknight_hammer_of_purity\n3436       35911    19 10.33   1037    36225     sandking_caustic_finale\n3437       35911    19 10.33   1037    36225    drow_ranger_marksmanship\n11082      33439    26 18.00   1077    38395  rattletrap_battery_assault\n\n\nIn total, I select 4 top abilities through these parallel coordinate plots, which are the following:\n1. omniknight_hammer_of_purity\n2. sandking_caustic_finale\n3. drow_ranger_marksmanship\n4. rattletrap_battery_assault"
  },
  {
    "objectID": "results.html#do-these-four-good-abilities-function-better-on-radiant-or-dire",
    "href": "results.html#do-these-four-good-abilities-function-better-on-radiant-or-dire",
    "title": "3  Results",
    "section": "3.3 Do these four good abilities function better on radiant or dire?",
    "text": "3.3 Do these four good abilities function better on radiant or dire?\nTo answer the question, we decide to draw mosaic plot here because it can incorporate group size into account and can clearly show the relationship between multiple categorical variables, which are win (1 is win and 0 is lose), isRadient(True is radient and False is dire), and ability in our case.\n\n\nCode\nlibrary(vcd)\n\n\nLoading required package: grid\n\n\nCode\nlibrary(RColorBrewer)\ndf_2 &lt;- dota2[dota2$ability == \"omniknight_hammer_of_purity\" | dota2$ability == \"sandking_caustic_finale\" | dota2$ability == \"drow_ranger_marksmanship\" | dota2$ability == \"rattletrap_battery_assault\",]\ndf_2[df_2 == \"omniknight_hammer_of_purity\"] &lt;- 'o'\ndf_2[df_2 == \"sandking_caustic_finale\"] &lt;- 's'\ndf_2[df_2 == \"drow_ranger_marksmanship\"] &lt;- 'd'\ndf_2[df_2 == \"rattletrap_battery_assault\"] &lt;- 'r'\n\nvcd::mosaic(win~ability+isRadiant, data = df_2, direction = c(\"v\",\"v\",\"h\"), highlighting_fill= matrix(c(\"lightblue\",\"grey\"),)) \n\n\n\n\n\nIn this mosaic plot, label ‘d’ represents the ability “drow_ranger_marksmanship”; ‘r’ represents the ability “rattletrap_battery_assault”; ‘o’ represents the ability “omniknight_hammer_of_purity”; ‘s’ represents the ability “sandking_caustic_finale”. These abbreviations make the plot clearer to read by avoiding label overlaps.\nFrom the above mosaic plot, we can see for the three abilities “omniknight_hammer_of_purity”, “drow_ranger_marksmanship”, and “rattletrap_battery_assault”, they perform significantly better on radiant, while for the ability “sandking_caustic_finale”, it performs better on dire (not radiant), so the choice of radiant/dire really depends on the abilities chosen. In our case, these four abilities generally function better on radiant."
  },
  {
    "objectID": "results.html#what-heroes-are-most-commonly-associated-with-the-four-good-abilities",
    "href": "results.html#what-heroes-are-most-commonly-associated-with-the-four-good-abilities",
    "title": "3  Results",
    "section": "3.4 What heroes are most commonly associated with the four good abilities?",
    "text": "3.4 What heroes are most commonly associated with the four good abilities?\nThis question can be answered by drawing the separate barplots for each ability. When people are assigned hero, these heroes are designed with a specific role in mind, so they have tendence to select correlated abilities. From the barplots we can know what heroes are highly correlated to the selection of each ability among all four.\n\n\nCode\ndf_d &lt;- df_2[df_2$ability == \"d\",] \ndf_d = as.data.frame(table(df_d$hero))\nnames(df_d)[1] = 'hero'\ndf_d$rank = rank(df_d$Freq)\ndf_d &lt;- df_d[order(df_d$rank,decreasing=TRUE),]\n\na = ggplot(df_d, aes(x=reorder(hero,-Freq),y=Freq))+\n  geom_col(color='pink', fill ='lightpink', width=0.8)+\n  labs(title=\"Count of Hero Associated with 'd'\",x=\"hero\", y = \"Count\")+\n  theme(axis.text.x = element_text(angle = 90, hjust=1, size = 8)) \n\ndf_r &lt;- df_2[df_2$ability == \"r\",] \ndf_r = as.data.frame(table(df_r$hero))\nnames(df_r)[1] = 'hero'\ndf_r$rank = rank(df_r$Freq)\ndf_r &lt;- df_r[order(df_r$rank,decreasing=TRUE),]\n\nb = ggplot(df_r, aes(x=reorder(hero,-Freq),y=Freq))+\n  geom_col(color='pink', fill ='lightpink', width=0.8)+\n  labs(title=\"Count of Hero Associated with 'r'\",x=\"hero\", y = \"Count\")+\n  theme(axis.text.x = element_text(angle = 90, hjust=1, size = 8)) \n\ndf_o &lt;- df_2[df_2$ability == \"o\",] \ndf_o = as.data.frame(table(df_o$hero))\nnames(df_o)[1] = 'hero'\ndf_o$rank = rank(df_o$Freq)\ndf_o &lt;- df_o[order(df_o$rank,decreasing=TRUE),]\n\nc = ggplot(df_o, aes(x=reorder(hero,-Freq),y=Freq))+\n  geom_col(color='pink', fill ='lightpink', width=0.8)+\n  labs(title=\"Count of Hero Associated with 'o'\",x=\"hero\", y = \"Count\")+\n  theme(axis.text.x = element_text(angle = 90, hjust=1, size = 8)) \n\ndf_s &lt;- df_2[df_2$ability == \"s\",] \ndf_s = as.data.frame(table(df_s$hero))\nnames(df_s)[1] = 'hero'\ndf_s$rank = rank(df_s$Freq)\ndf_s &lt;- df_s[order(df_s$rank,decreasing=TRUE),]\n\nd = ggplot(df_s, aes(x=reorder(hero,-Freq),y=Freq))+\n  geom_col(color='pink', fill ='lightpink', width=0.8)+\n  labs(title=\"Count of Hero Associated with 's'\",x=\"hero\", y = \"Count\")+\n  theme(axis.text.x = element_text(angle = 90, hjust=1, size = 8)) \n\n\n\n\nCode\nlibrary(\"ggpubr\")\nggarrange(a,b,c,d,common.legend = TRUE, legend = \"bottom\")\n\n\n\n\n\nFrom above barplots, we can see the hero Drow Ranger tends to be highly associated with the ability “drow_ranger_marksmanship”; the hero Lina is highest correlated to the ability “rattletrap_battery_assault”; the hero Omniknight is highest correlated to the ability “omniknight_hammer_of_purity”; the hero Gyrocoopter is highest correlated to the ability “sandking_caustic_finale”. When people are randomly assigned these heroes, they are more likely to also select these four good abilities with a significant frequency difference compared to other heroes."
  },
  {
    "objectID": "results.html#how-many-resources-are-consumed-by-these-four-abilities-compared-to-the-the-other-abilities",
    "href": "results.html#how-many-resources-are-consumed-by-these-four-abilities-compared-to-the-the-other-abilities",
    "title": "3  Results",
    "section": "3.5 How many resources are consumed by these four abilities compared to the the other abilities?",
    "text": "3.5 How many resources are consumed by these four abilities compared to the the other abilities?\nWe want to draw histograms of continuous variable net worth faceted by all 30 abilities to see the distribution of net resources of each player possessing good abilities compared to rest of the abilities.\n\n\nCode\ndota2[dota2 == \"omniknight_hammer_of_purity\"] &lt;- 'o'\ndota2[dota2 == \"sandking_caustic_finale\"] &lt;- 's'\ndota2[dota2 == \"drow_ranger_marksmanship\"] &lt;- 'd'\ndota2[dota2 == \"rattletrap_battery_assault\"] &lt;- 'r'\nggplot(dota2, aes(net_worth))+\n  geom_histogram(color = 'cornflowerblue', fill = 'lightblue', bins=15)+\n  facet_wrap(~ability)+\n  labs(\"Faceted Histogram of Net Worth\")+\n  theme_grey(9)\n\n\n\n\n\nFrom these histograms, we can see the three abilities “omniknight_hammer_of_purity”, “drow_ranger_marksmanship”, and “rattletrap_battery_assault” consume relative moderate amount of resources compared to the rest of the abilities, while the fourth ability “sandking_caustic_finale” spend high amount of resources with a widespread value range on net worth."
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "We realize for some of the research questions, it’s hard to visualize. Consequently, we choose to answer three research questions among all ten listed in introduction that are essential and can be visualized with tools learnt in class.\nFirstly, among the 30 abilities with top frequencies, the four abilities “omniknight_hammer_of_purity”, “drow_ranger_marksmanship”, “sandking_caustic_finale”, and “rattletrap_battery_assault” have the highest damage, kills, gold, experiences points earned, and kda (a statistic that is used to measure a player’s performance), and are therefore the most valuable based on our analysis. Secondly, for these four abilities selected, they function better on radient instead of dire. Thirdly, each ability is tied to different heroes. The hero Drow Ranger tends to be highly associated with the ability “drow_ranger_marksmanship”; the hero Lina is highest correlated to the ability “rattletrap_battery_assault”; the hero Omniknight is highest correlated to the ability “omniknight_hammer_of_purity”; the hero Gyrocoopter is highest correlated to the ability “sandking_caustic_finale”. Thus, when we want to select four abilities in the game mode, we need to notice the compatibility between the assigned hero and the abilities. Fourthly, we examine the economic standing of the player possessing these four abilities compared to other abilities, and we conclude that all four of them are under reasonably fine economic standing, with “sandking_caustic_finale” consume high amount of resources compared to all abilities.\nThe most essential limitation in our research is that, in theory, there is a total of over 500 abilities that need to be analyzed. However, it’s hard to visualize such large set of abilities, and also many abilities have very limited amount of data, so we decide to only do research on the abilities with top frequencies in our dataset. It’s possible that abilities other than these 30 abilities selected to be more valuable. Thus, in the future, it’s better to collect more data to gain more information regarding all abilities, and we also need to figure out better ways to visualize such large dataset so that our conclusion would be more comprehensive.\nDuring our research process, we learnt the importance of data preprocessing before start graphing. For example,at the beginning, the abilities are arrays with four integers in each, and we realize it’s hard to draw any graphs by using such dataset. Then, we need to go back and converted them back to ability names and separate each row into four rows. This process should be better done before starting data visualization."
  }
]