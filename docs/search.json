[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dota 2",
    "section": "",
    "text": "1 Introduction\nFor the final project, We chose to analyze the value of abilities in Dota 2’s “Ability Draft” (AD) game mode in order to provide a recommendation for ability selections. Firstly we would like to introduce the game. Dota 2, short for Defense of the Ancients 2, is a highly popular multiplayer online battle arena (MOBA) video game developed and published by Valve Corporation. There are two teams of five players for this game, with each team occupying and defending their territories on a map.\nThe following is the detailed context of this game. Every drafting phase begins by randomly selecting 12 out of the 124 characters or “heroes” in Dota 2. Each hero has four unique abilities associated with them, [QA, WA, EA, RA] for a generic hero A. Of the 12 selected heroes, one is assigned to each of the 10 players (assignment is unique), although the abilities of the unused heroes remain in the drafting pool. Then, in drafting order, each player selects one of the abilities in the pool to assign to their hero. Once all players have four abilities, the drafting phase ends and the players face-off in a five versus five Dota 2 match.\nGold and experience are finite resources in Dota 2 that must be divided amongst teammates. In practice, it is better for some players to receive the majority of the resources because different abilities/heroes require various resources to be maximally effective. In AD, these resources must be intuitively divided by the players on the same team to reach maximum effectiveness.\nConsidering this, we formulate ten research questions to begin our data exploration:\n- Which abilities have the highest average win rate, damage, kills, gold, experiences, etc., and are therefore the most valuable?\n- What is the relationship between heroes and the abilities selected for them?\n- What abilities are successful on the player with the most/fewest resources on a team?\n- How are abilities distributed between teams in one-sided/even matches?\n- Given a drafting pool and a hero, what ability should a player pick?\n- What is the relationship between abilities and items?\n- How do the in-game properties of heroes relate to abilities?\n- What abilities soak large amounts of resources but fail to win the game?\n- Do abilities or heroes function better on radiant or dire?\n- What abilities, heroes, and items are responsible for dealing significant building damage?"
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical Description",
    "text": "2.1 Technical Description\nThe data source we chose is OPENDOTA, a third-party, open-source data platform that collects data from Dota 2 games. It includes information concerning player and match statistics by leveraging the Dota 2 API provided by Valve, the parent company of Dota 2. Over five billion matches are stored, and matches can be accessed through the API within hours of their completion.\nThere are approximately 16 quadrillion possible drafts, and 500 million ways to order the heroes in any given AD game of Dota 2. This ensures that no AD match is exactly like another. In our analysis, we will evaluate the effectiveness of each ability across a small subset of these matches.\nWe compiled our dataset by we querying the OPENDOTA API to obtain AD matches. Matches are accessed using a “match_id” parameter. The easiest way to obtain a match_id is to query the API with a ‘player_id’, which fetches the matches that player has played. We used a few additional parameters to ensure that the match was the AD game mode. Unfortunately, there was no way to query the API to receive a match_id independently of a player, so the matches in our dataset were accessed with a player_id 74152970.\nThe response from the API upon requesting a particular match_id is a JSON object containing information pertaining to the match. For example, keys in the response indicate which team won, how long the game was, the total scores of both teams, the chat-log of the game, and the players present in the game. Each of the ten players are nested within the player data, and have their own keys such as their abilities, their number of kills, their total gold earned, and what items they owned.\nWe chose to format our data so that each row represents one player in one match. The columns include the general data from the match as well as the individual player data. In the raw responses, we noticed dozens of fields consistently being left blank. However, most of the information we aimed to collect was preserved and we selected a total of 41 fields to preserve for each data entry, giving us plenty to work with.\nSome data, like the abilities and heroes, are stored as integers rather than names. As a result, we will have to transform these values according to a key that we have obtained from the API. Additionally, a player’s abilities are actually stored in the order in which the player leveled the abilities up. We will need to parse which abilities a player actually has from this list, and decide whether or not to preserve the leveling order. This also raises the edge case of a player having an ability but never leveling it, which—although possible—is incredibly rare.\nWe performed our data compilation in Python and wrote the modified responses into an external CSV file, which we can import into R. Below is the breakdown of columns within the data:\nbarracks_status_dire — integer: dire barracks wellbeing\nbarracks_status_radiant — integer: radiant barracks wellbeing\ndire_score — integer: dire kill score\nduration — integer in seconds: length of the game\nfirst_blood_time — integer in seconds: time of the first kill\nradiant_score — integer: radiant kill score\nradiant_win — boolean: radiant victory\nstart_time — integer: absolute time the game started\ntower_status_radiant — integer: radiant tower wellbeing\nmatch_id — integer: the id of the match\nplayer_slot — integer: 0-4: radiant player order, 128-132: dire player order\nability_upgrades_arr — array (integers): order in which player leveled abilities\naccount_id — integer: player id\nassists — integer: number of kills aided in\ndeaths — integer: number of deaths\ndenies — integer: number of units denied\ngold_per_min — integer: gold accumulated per minute\ngold_spent — integer: gold spent\nhero_damage — integer: damage dealt\nhero_healing — integer: healing provided to teammates\nhero_id — integer: id of the player’s hero\nitem_0 — integer: id of item 0\nitem_1 — integer: id of item 1\nitem_2 — integer: id of item 2\nitem_3 — integer: id of item 3\nitem_4 — integer: id of item 4\nitem_ — integer: id of item 5\nitem_neutral — integer: id of item neutral\nkills — integer: number of kills\nlast_hits — integer: number of last hits  level — integer: hero level at the end of the match\nnet_worth — integer: value of the hero at the end of the match\ntower_damage — integer: damage dealt to enemy buildings\nxp_per_min — integer: experience accumulated per minute\npersonaname — string, None: if available, the username of the player\nisRadiant — boolean: indicates if the player is on radiant\nwin — boolean: indicates if the player won\nkills_per_min — integer: kills acquired per minute\nkda — float: kills / deaths\ntotal_gold — integer: total gold accumulated\ntotal_xp — integer: total experience accumulated\n\nAfter processing responses for over 8 hours, we collected data from a total of 668 matches. The API was very responsive when it came to fetching recent matches, taking only a few seconds, so it is possible that older matches are responsible for slowing down the process."
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.2 Research Plan",
    "text": "2.2 Research Plan\nTo begin our research, we will need to do some final formatting of the data. This includes the formatting of the integer ids for several columns and the parsing of the ability_upgrades_arr column. Additionally, since most of our questions are directed at individual abilities, we will likely split each row into four separate entries, one for each of the abilities possessed by the player.\nAdditionally, considering the differences in what abilities are present from one game to another, it may be helpful to add a column that includes the other abilities that were available in the pool, whether that ability was picked in the draft, and whether it was against or with the ability in the entry.\nOnce the data is processed and cleaned, we can proceed to answering our research questions, as is outlined below:\n\nWhich abilities have the highest average win rate, damage, kills, gold, experiences, etc., and are therefore the most valuable?\nWe could make several bar charts plotting the average of the desired metric for an ability across the dataset. We could also create a scatterplot comparing the relationship between the two metrics and the ability.\nWhat is the relationship between heroes and the abilities selected for them?\nWe could look at individual hero-ability pairings while fixing the ability or the hero and display it in a bar chart. We could also calculate averages for all hero-ability pairings and search for the most and least successful, and plot those pairings. Since there are multiple ‘success’ metrics, we could also create scatterplots to plot hero-ability pairs across two metrics at a time, like gold and experience or kills and deaths.\nAdditionally, it may be interesting to see how common it is for particular heroes to pick an ability. We could plot a bar chart with the total number of times each hero picked an ability.\nWhat abilities are successful on the player with the most/fewest resources on a team?\nWe would need to filter the data to ascertain which heroes on a team were delegated large or small portions of the resources available to the team. Then, we could plot bar charts or scatter plots depicting the effectiveness or ineffectiveness of abilities based on allocated resources.\nHow are abilities distributed between teams in one-sided/even matches?\nWe could filter our data for matches in which the duration was short, the kill-score was one-sided, or the difference in resources between teams was great. Then, we could track the prevalence of abilities on the winning or losing teams.\nGiven a drafting pool and a hero, what ability should a player pick?\nThis is likely the most complicated of our research questions. First, we consider that that value of an ability is the sum of how much value it provides, and how much value it would provide to the enemy. To figure out which ability a player should pick in the draft, we could create facetted, two-by-five heat maps representing the players in the draft.\nIf a player won with the ability, we could add 1 to their tile, and subtract 1 if they lost, and facet for each ability in the drafting pool. Additionally, drafting pools that are more similar hold more predictive weight, but because there are fewer samples the more common draft pools become, the data becomes less reliable. To account for this, we could assign higher weights to more similar pools, or we could further facet the heat maps by the number of abilities held in common between the drafting pools.\n\nIf we have time and would like to do additional data exploration, we could also answer the following questions:\n\nWhat is the relationship between abilities and items?\nWe could perform some exploratory analysis on the ability-item pairings, similar to hero-ability pairings.\nHow do the in-game properties of heroes relate to abilities?\nIn Dota 2, the heroes themselves have properties associated with them, like health, armor, and mana. The OPENDOTA API also includes this information, and we could augment our data with the base values of each hero to perform additional analysis and look for trends.\nWhat abilities soak large amounts of resources but fail to win the game?\nWe could filter for lost games and tally the abilities present on the rich members of the losing team.\nDo abilities or heroes function better on radiant or dire?\nWe could filter the data by which team the ability was present on and see if there are any trends. There are three abilities that have different functions depending on what team they are on, and we may see some difference in effectiveness for these abilities.\nWhat abilities, heroes, and items are responsible for dealing significant building damage?\nWe could take the building damage dealt by a player with an ability, and tally the total building damage of all of the abilities.  Depending on the results of our exploration and analysis, we may choose to pursue these questions or others. But these ideas give us a place to start when exploring the data. We hope we will come across patterns that lead to further questions that we can’t anticipate!"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nRows: 6680 Columns: 41\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): ability_upgrades_arr, personaname\ndbl (37): barracks_status_dire, barracks_status_radiant, dire_score, duratio...\nlgl  (2): radiant_win, isRadiant\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nIn the figure above, we can see the number of missing values in each column. Immediately, we notice massive values in the tower_damage, hero_healing, hero_damage, gold_spent, ability_upgrades_arr, personaname, account_id, and kills_per_min columns.\nSome accounts are private and are therefore not stored in the system, which explains the missing data in the account_id and personaname columns.\nThe kills_per_min column has a missing value if the player achieved no kills during the course of the match, so these values are actually 0.\nWe are not sure what is responsible for the gaps in tower_damage, hero_healing, hero_damage, gold_spent, ability_upgrades_arr. It is particularly troublesome considering that the ability_upgrades_arr column is crucial for analysis. After querying the API for over 8 hours, we halted the process early, but it seems unlikely that that would have been responsible for the gaps. More likely, there are just gaps or errors in OPENDOTA’s data collection. Luckily, the same rows are missing multiple columns, leaving us with well over 3000 samples to begin analysis with."
  }
]